initSidebarItems({"enum":[["Operator","A token representing an operator."]],"struct":[["BinaryOperatorNode","An AST representing an operator with 2 expressions by its side. For example, “1 + 2” is an expression with a binary operator, with ‘+’ being the operator, and ‘1’ and ‘2’ being the 2 arguments of the operator."],["ExternFunctionNode","An AST representing a function declaration whose definition is defined externally in another library or language."],["FloatNode","A node representing a float. The float conforms to IEEE 754’s double precision binary float (equivalent to Rust’s `f64`)."],["FunctionCallNode","A node representing a function call. This struct stores the name of the function and the list of arguments as a [`Vec`]tor."],["FunctionNode","A node representing a function definition."],["FunctionPrototypeNode","A node representing a function prototype. This contains the name of the function and the parameters the function accepts."],["IdentifierNode","A struct representing a name or path that can identify an object, function or data structure like classes."],["IntegerNode","A node representing an integer. This integer’s internal representation depends on [`IntegerType`]."],["UnaryOperatorNode","An AST representing an operator which takes 1 argument."],["VariableExpressionNode","An expression where it’s just one variable. This is essentially like `y` in the statement `x = y` in typical “C-like” languages."]],"type":[["FloatType","The type used to represent a Kaleidoscope float. This is equivalent to Rust’s `f64` or C’s `double`."],["IntegerType","The internal representation of an integer,"]]});