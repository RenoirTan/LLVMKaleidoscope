initSidebarItems({"enum":[["NodeEnum","A common enumerator for passing nodes as a return value and parameter."]],"fn":[["reify_expr_node","Convert an expression node as a trait object and convert it into a node with a known and concrete type."],["reify_expr_node_mut","Convert a boxed [`ExprNode`] to a mutable reference to a node with a concrete type."],["reify_expr_node_ref","Convert a boxed [`ExprNode`] to an immutable reference to a node with a concrete type."],["reify_node","Convert a node as a trait object and convert it into a concrete node with a known type."],["reify_node_mut","Convert a boxed [`Node`] to a mutable reference to a node with a concrete type."],["reify_node_ref","Convert a boxed [`Node`] to an immutable reference to a node with a concrete type."],["typeid_to_u64","Convert the [`TypeId`] of a type into its underlying [`u64`] fingerprint value."],["upcast_expr_node","Convert an [`ExprNode`] to [`Node`]."]],"trait":[["ExprNode","A node representing an expression."],["FromToken","A node that implements this trait can convert one token to an instance of itself (e.g. numbers)."],["Node","The trait that all node types must implement."],["NodeType","Types which act as nodes in an AST of a Kaleidoscope programme. This type is separated from [`Node`] so that the Rust compiler can create trait objects from [`Node`] and [`ExprNode`]."]]});